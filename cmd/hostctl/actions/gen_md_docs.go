package actions

import (
	"errors"
	"fmt"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

var errPathNotDirectory = errors.New("path should be a directory")

func newGenMdDocsCmd(rootCmd *cobra.Command) *cobra.Command {
	return &cobra.Command{
		Use:    "gen-md-docs",
		Short:  "Creates full documentation for this CLI",
		Hidden: true,
		Long: `
Creates full markdown documentation and store it on the given path.
`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			output, _ := cmd.Flags().GetString("path")

			s, err := os.Stat(output)
			if err != nil {
				return err
			}

			if !s.IsDir() {
				return errPathNotDirectory
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			output, _ := cmd.Flags().GetString("path")

			err := doc.GenMarkdownTreeCustom(rootCmd, output, filePrepender, linkHandler)
			if err != nil {
				return err
			}

			err = filepath.Walk(output, func(src string, info os.FileInfo, err error) error {
				if err != nil {
					return err
				}
				if src == output {
					return nil
				}

				fname := path.Base(src)

				dst := strings.Replace(src, "hostctl_", "", 1)
				if fname == "hostctl.md" { //nolint: goconst
					dst = path.Join(output, "_index.md")
					err = fixContent(rootCmd.Long, src)
				} else {
					err = fixContent(rootCmd.Long, src)
				}
				if err != nil {
					return err
				}

				return os.Rename(src, dst)
			})
			if err != nil {
				return err
			}

			return nil
		},
	}
}

func fixContent(desc, dst string) error {
	also := "### SEE ALSO"
	autoRe := regexp.MustCompile("###### Auto generated by spf13/cobra on .*")
	alsoRe := regexp.MustCompile(also)

	data, err := os.ReadFile(dst)
	if err != nil {
		return fmt.Errorf("%s: %w", ErrReadingFile.Error(), err)
	}

	data = autoRe.ReplaceAll(data, []byte("*Auto generated by spf13/cobra*"))
	data = alsoRe.ReplaceAll(data, []byte("#"+also))

	wrapped := fmt.Sprintf("```\n%s\n```\n", desc)
	final := strings.Replace(string(data), desc, wrapped, 1)

	return os.WriteFile(dst, []byte(final), 0666) //nolint: gosec,gomnd
}

func filePrepender(filename string) string {
	fmTemplate := `---
title: "%s"
weight: %d
---

`
	name := filepath.Base(filename)
	weight := 100

	if name == "hostctl.md" {
		name = "CLI Usage"
		weight = 90
	} else {
		name = strings.TrimSuffix(name, path.Ext(name))
		name = strings.Replace(name, "hostctl_", "", 1)
		name = strings.Replace(name, "_", " ", -1)
	}

	return fmt.Sprintf(fmTemplate, name, weight)
}

func linkHandler(name string) string {
	name = strings.TrimSuffix(name, path.Ext(name))
	name = strings.Replace(name, "hostctl_", "", 1)
	prefix := os.Getenv("LINKS_PREFIX")

	return fmt.Sprintf("%s/docs/cli-usage/%s", prefix, strings.ToLower(name))
}
